from pwn import *
import hashlib

#context.log_level = "debug"
BLOCK_SIZE = 16

def str_to_bin(data):
    return "".join([bin(ord(i))[2:].rjust(8, "0") for i in data])

def bin_to_str_padded(data):
    padding_len = (8 - (len(data) % 8))
    if padding_len != 8:
        data = data + padding_len * "0"
    return "".join([chr(int(data[i:i+8], 2)) for i in range(0, len(data), 8)])

def permute_iv(iv):
    return hashlib.sha256(iv).digest()[:BLOCK_SIZE]

def main():
    #p = process("./oracle.py")
    p = remote("localhost", 1344)
    p.recvline()
    seed = p.recvline().split(": ")[1].strip().decode("hex")
    log.info("Seed: %s" % seed.encode("hex"))

    current_iv = seed
    bits = []
    for i in range(BLOCK_SIZE*8):
        m0_iv = current_iv
        m0 = ((BLOCK_SIZE*8) - 1 - i) * "0"
        p.sendline(m0)
        m0_line = p.recvline().strip()
        m0_res = m0_line[38:].decode("hex")
        m0_block = m0_res[:BLOCK_SIZE]
        m1_iv = permute_iv(current_iv)
        current_iv = m1_iv
        temp_loaded = bin_to_str_padded(m0 + "".join(map(str, bits)) + "0")
        m1 = str_to_bin(xor(xor(m0_iv, m1_iv), temp_loaded))
        p.sendline(m1)
        m1_line = p.recvline().strip()
        m1_res = m1_line[38:].decode("hex")
        m1_block = m1_res[:BLOCK_SIZE]
        if m0_block == m1_block:
            bits.append(0)
        else:
            bits.append(1)
        log.info("m0_block: %s" % m0_block.encode("hex"))
        log.info("m1_block: %s" % m1_block.encode("hex"))
        log.info("Bit %d: %d" % (i, bits[-1]))
        current_iv = permute_iv(current_iv)

    flag = bin_to_str_padded("".join(map(str, bits)))
    log.success("Flag: %s" % flag)


if __name__ == "__main__":
    main()
